name: Build, Test, and Create PR from develop to master

on:
  pull_request:
    branches:
      - '*'

jobs:
  # Job 1: Build and Test the PR
  build-and-test-pr:
    name: Build and run testcases of PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Java version from build.gradle
        id: extract_java_version
        run: |
          JAVA_VERSION=$(grep 'sourceCompatibility' build.gradle | awk '{print $3}' | sed "s/'//g")
          # Convert Java version format to SemVer if needed
          if [[ "$JAVA_VERSION" == "1.8" ]]; then
            JAVA_VERSION="8"
          elif [[ "$JAVA_VERSION" == "17" ]]; then
            JAVA_VERSION="17"
          else
            echo "Unsupported Java version format."
            exit 1
          fi
          echo "Java Version: $JAVA_VERSION"
          echo "::set-output name=java_version::$JAVA_VERSION"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ steps.extract_java_version.outputs.java_version }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build and test the project with Gradle
        run: ./gradlew clean build


  # Job 2: Build and Test on PR to develop
  merge-to-target-and-build-and-test:
    name: Merger the changes and build and run testcases
    needs: build-and-test-pr
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3


      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Fetch all branches
        run: |
          git fetch origin +refs/heads/*:refs/remotes/origin/*

      - name: Checkout target branch
        run: |
          git checkout ${{ github.event.pull_request.base.ref }}

      - name: Create a temporary branch for merging
        run: |
          git checkout -b temp-merge-branch

      - name: Merge PR source branch into temporary branch
        run: |
          git merge origin/${{ github.event.pull_request.head.ref }} --no-ff --commit -m "Merge PR source branch"

      - name: Extract Java version from build.gradle
        id: extract_java_version
        run: |
          JAVA_VERSION=$(grep 'sourceCompatibility' build.gradle | awk '{print $3}' | sed "s/'//g")
          # Convert Java version format to SemVer if needed
          if [[ "$JAVA_VERSION" == "1.8" ]]; then
            JAVA_VERSION="8"
          elif [[ "$JAVA_VERSION" == "17" ]]; then
            JAVA_VERSION="17"
          else
            echo "Unsupported Java version format."
            exit 1
          fi
          echo "Java Version: $JAVA_VERSION"
          echo "::set-output name=java_version::$JAVA_VERSION"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ steps.extract_java_version.outputs.java_version }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build and test the project with Gradle
        run: ./gradlew clean build

  test-report:
    name: Code coverage
    needs: build-and-test-pr
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v1
        with:
          java-version: 17
      - name: Run Coverage
        run: |
          chmod +x gradlew
          ./gradlew testCoverage

      - name: Extract Coverage Percentage
        id: coverage
        run: |
          COVERAGE=$(grep -oPm1 "(?<=<counter type=\"LINE\" covered=\")\d+" build/reports/jacoco/test/jacocoTestReport.xml)
          MISSED=$(grep -oPm1 "(?<=missed=\")\d+" build/reports/jacoco/test/jacocoTestReport.xml)
          TOTAL=$((COVERAGE + MISSED))
          PERCENTAGE=$(awk "BEGIN {printf \"%.2f\", (${COVERAGE} / ${TOTAL}) * 100}")
          echo "coverage=$PERCENTAGE" >> $GITHUB_ENV

      - name: Print Coverage
        run: |
          echo "Line Coverage: ${{ env.coverage }}%"

      - name: Post Coverage to PR
        if: github.event_name == 'pull_request'
        run: |
          gh auth login --with-token ${{ secrets.GITHUB_TOKEN }}
          gh pr comment ${{ github.event.pull_request.number }} --body "JaCoCo Code Coverage: ${{ env.coverage }}%"