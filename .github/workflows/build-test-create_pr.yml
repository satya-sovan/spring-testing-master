name: Build, Test, and Create PR from develop to master

on:
  pull_request:
    branches:
      - '*'

  push:
    branches:
      - develop

jobs:
  code-qulity:
    name: Lint
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - name: Super-linter
        uses: super-linter/super-linter@v7.1.0 # x-release-please-version

  # Job 1: Build and Test on PR to develop
  build-and-test:
    name: Build and run testcases
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Java version from build.gradle
        id: extract_java_version
        run: |
          JAVA_VERSION=$(grep 'sourceCompatibility' build.gradle | awk '{print $3}' | sed "s/'//g")
          # Convert Java version format to SemVer if needed
          if [[ "$JAVA_VERSION" == "1.8" ]]; then
            JAVA_VERSION="8"
          elif [[ "$JAVA_VERSION" == "17" ]]; then
            JAVA_VERSION="17"
          else
            echo "Unsupported Java version format."
            exit 1
          fi
          echo "Java Version: $JAVA_VERSION"
          echo "::set-output name=java_version::$JAVA_VERSION"

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ steps.extract_java_version.outputs.java_version }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build and test the project with Gradle
        run: ./gradlew clean build

  # Job 2: Build, Test, Merge develop to master, and Create PR
  create-pr:
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract Java version from build.gradle
        id: extract_java_version
        run: |
          JAVA_VERSION=$(grep 'sourceCompatibility' build.gradle | awk '{print $3}' | sed "s/'//g")
          # Convert Java version format to SemVer if needed
          if [[ "$JAVA_VERSION" == "1.8" ]]; then
            JAVA_VERSION="8"
          elif [[ "$JAVA_VERSION" == "17" ]]; then
            JAVA_VERSION="17"
          else
            echo "Unsupported Java version format."
            exit 1
          fi
          echo "Java Version: $JAVA_VERSION"
          echo "::set-output name=java_version::$JAVA_VERSION"

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ steps.extract_java_version.outputs.java_version }}

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build and test the develop branch with Gradle
        run: ./gradlew clean build
        continue-on-error: false  # Fail the job if tests fail

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Fetch all branches
        run: git fetch origin

      - name: Attempt to merge develop into master
        run: |
          git checkout master
          git pull origin master
          git merge --no-commit --no-ff develop
        continue-on-error: false  # Fail the job if there's a merge conflict

      - name: Install GitHub CLI
        run: |
          sudo apt-get install gh

      - name: Authenticate GitHub CLI
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      - name: Get the latest PR title and body from develop
        id: get_pr_details
        run: |
          # Get the latest PR number for develop
          PR_NUMBER=$(gh pr list --base develop --state closed --limit 1 --json number -q '.[] | .number')

          if [ -z "$PR_NUMBER" ]; then
            echo "No PR found on develop branch."
            exit 1
          fi

          # Get the title and body of the latest PR
          PR_DETAILS=$(gh pr view $PR_NUMBER --json title,body --jq '{title: .title, body: .body}')
          
          PR_TITLE=$(echo $PR_DETAILS | jq -r .title)
          PR_BODY=$(echo $PR_DETAILS | jq -r .body)

          echo "PR Title: $PR_TITLE"
          echo "PR Body: $PR_BODY"

          echo "::set-output name=pr_title::$PR_TITLE"
          echo "::set-output name=pr_body::$PR_BODY"

      - name: Create Pull Request from develop to master
        run: |
          gh pr create --base master --head develop \
            --title "${{ steps.get_pr_details.outputs.pr_title }}" \
            --body "${{ steps.get_pr_details.outputs.pr_body }}"
