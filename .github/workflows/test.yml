name: CI Pipeline

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop

jobs:
  build:
    name: Code coverage
    #needs: build-and-test-pr
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build and test with JaCoCo
        run: |
          chmod +x gradlew
          ./gradlew clean build jacocoTestReport

      - name: Check for JaCoCo XML report
        run: ls build/reports/jacoco/test/jacocoTestReport.xml

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Run inline Python script to parse JaCoCo report and save summary
        id: coverage
        run: |
          python - <<EOF
          import xml.etree.ElementTree as ET
          
          def parse_jacoco_report(xml_file):
              tree = ET.parse(xml_file)
              root = tree.getroot()
          
              coverage_data = {
                  "line_coverage": None,
                  "branch_coverage": None,
                  "method_coverage": None,
                  "class_coverage": None,
                  "instruction_coverage": None,
              }
          
              # JaCoCo XML uses 'counter' tags for different coverage types
              for counter in root.findall("./counter"):
                  coverage_type = counter.attrib['type']
                  covered = int(counter.attrib['covered'])
                  missed = int(counter.attrib['missed'])
                  total = covered + missed
                  
                  #Only for debug
                  #print(f"Coverage Summary: {coverage_type}")
                  #print(f"covered: {covered}")
                  #print(f"missed: {missed}")
          
                  if total > 0:
                      percentage = (covered / total) * 100
          
                      if coverage_type == "LINE":
                          coverage_data["line_coverage"] = percentage
                      elif coverage_type == "BRANCH":
                          coverage_data["branch_coverage"] = percentage
                      elif coverage_type == "METHOD":
                          coverage_data["method_coverage"] = percentage
                      elif coverage_type == "CLASS":
                          coverage_data["class_coverage"] = percentage
                      elif coverage_type == "INSTRUCTION":
                          coverage_data["instruction_coverage"] = percentage
          
              return coverage_data
          
          # Path to the JaCoCo XML report
          report_path = "build/reports/jacoco/test/jacocoTestReport.xml"
          coverage = parse_jacoco_report(report_path)
          
          # Define color indicators
          def coverage_indicator(coverage):
            if coverage < 80:
              return "ðŸ”´"  # Red circle emoji
            else:
              return "ðŸŸ¢"  # Green circle emoji
  
          # Build summary with color indicators
          summary = f"### JaCoCo Coverage Summary:\\n"
          summary += f"**Instruction Coverage**: {coverage_indicator(coverage['instruction_coverage'])} {coverage['instruction_coverage']:.2f}%\\n"
          summary += f"**Line Coverage**: {coverage_indicator(coverage['line_coverage'])} {coverage['line_coverage']:.2f}%\\n"
          summary += f"**Branch Coverage**: {coverage_indicator(coverage['branch_coverage'])} {coverage['branch_coverage']:.2f}%\\n"
          summary += f"**Method Coverage**: {coverage_indicator(coverage['method_coverage'])} {coverage['method_coverage']:.2f}%\\n"
          summary += f"**Class Coverage**: {coverage_indicator(coverage['class_coverage'])} {coverage['class_coverage']:.2f}%\\n"
                                           
          print(summary)
          
          with open('coverage_summary.txt', 'w') as f:
              f.write(summary)
          EOF

      - name: Post Coverage to PR
        if: github.event_name == 'pull_request'
        run: |
          gh pr comment ${{ github.event.pull_request.number }} --body-file "coverage_summary.txt"
        env:
          GH_TOKEN: ${{ github.token }}

      - name: Add comment to PR using gh CLI
        if: false #github.event_name == 'pull_request'
        run: |
          COMMENT_BODY=$(cat coverage_summary.txt)
          gh pr comment ${{ github.event.pull_request.number }} --body-file "coverage_summary.txt"
        
